// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewBeaconSet extends ethereum.Event {
  get params(): NewBeaconSet__Params {
    return new NewBeaconSet__Params(this);
  }
}

export class NewBeaconSet__Params {
  _event: NewBeaconSet;

  constructor(event: NewBeaconSet) {
    this._event = event;
  }

  get oldBeacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newBeacon(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewCapneoNFTIndexed extends ethereum.Event {
  get params(): NewCapneoNFTIndexed__Params {
    return new NewCapneoNFTIndexed__Params(this);
  }
}

export class NewCapneoNFTIndexed__Params {
  _event: NewCapneoNFTIndexed;

  constructor(event: NewCapneoNFTIndexed) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proxyData(): NewCapneoNFTIndexedProxyDataStruct {
    return changetype<NewCapneoNFTIndexedProxyDataStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class NewCapneoNFTIndexedProxyDataStruct extends ethereum.Tuple {
  get beacon(): Address {
    return this[0].toAddress();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get deployer(): Address {
    return this[2].toAddress();
  }

  get deployedTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get snapshotSpace(): string {
    return this[4].toString();
  }
}

export class OpenseaFactoryChanged extends ethereum.Event {
  get params(): OpenseaFactoryChanged__Params {
    return new OpenseaFactoryChanged__Params(this);
  }
}

export class OpenseaFactoryChanged__Params {
  _event: OpenseaFactoryChanged;

  constructor(event: OpenseaFactoryChanged) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CoreCapneo__getCapneoNFTByAddressResultValue0Struct extends ethereum.Tuple {
  get beacon(): Address {
    return this[0].toAddress();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get deployer(): Address {
    return this[2].toAddress();
  }

  get deployedTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get snapshotSpace(): string {
    return this[4].toString();
  }
}

export class CoreCapneo__getCapneoNFTByIndexResultValue0Struct extends ethereum.Tuple {
  get beacon(): Address {
    return this[0].toAddress();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get deployer(): Address {
    return this[2].toAddress();
  }

  get deployedTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get snapshotSpace(): string {
    return this[4].toString();
  }
}

export class CoreCapneo__getMultipleCapneoNFTsByIndexResultRetStruct extends ethereum.Tuple {
  get beacon(): Address {
    return this[0].toAddress();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get deployer(): Address {
    return this[2].toAddress();
  }

  get deployedTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get snapshotSpace(): string {
    return this[4].toString();
  }
}

export class CoreCapneo extends ethereum.SmartContract {
  static bind(address: Address): CoreCapneo {
    return new CoreCapneo("CoreCapneo", address);
  }

  BEACON_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "BEACON_MANAGER_ROLE",
      "BEACON_MANAGER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_BEACON_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "BEACON_MANAGER_ROLE",
      "BEACON_MANAGER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEPLOYER_ROLE(): Bytes {
    let result = super.call("DEPLOYER_ROLE", "DEPLOYER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DEPLOYER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEPLOYER_ROLE",
      "DEPLOYER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  KYC_SIGNER_ROLE(): Bytes {
    let result = super.call(
      "KYC_SIGNER_ROLE",
      "KYC_SIGNER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_KYC_SIGNER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "KYC_SIGNER_ROLE",
      "KYC_SIGNER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OPENSEA_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "OPENSEA_MANAGER_ROLE",
      "OPENSEA_MANAGER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_OPENSEA_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "OPENSEA_MANAGER_ROLE",
      "OPENSEA_MANAGER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PROTOCOL_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "PROTOCOL_MANAGER_ROLE",
      "PROTOCOL_MANAGER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PROTOCOL_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PROTOCOL_MANAGER_ROLE",
      "PROTOCOL_MANAGER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAllNFTAddresses(): Array<Address> {
    let result = super.call(
      "getAllNFTAddresses",
      "getAllNFTAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllNFTAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllNFTAddresses",
      "getAllNFTAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getBeaconByNFTAddress(nft: Address): Address {
    let result = super.call(
      "getBeaconByNFTAddress",
      "getBeaconByNFTAddress(address):(address)",
      [ethereum.Value.fromAddress(nft)]
    );

    return result[0].toAddress();
  }

  try_getBeaconByNFTAddress(nft: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBeaconByNFTAddress",
      "getBeaconByNFTAddress(address):(address)",
      [ethereum.Value.fromAddress(nft)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCapneoNFTByAddress(
    nft: Address
  ): CoreCapneo__getCapneoNFTByAddressResultValue0Struct {
    let result = super.call(
      "getCapneoNFTByAddress",
      "getCapneoNFTByAddress(address):((address,uint48,address,uint48,string))",
      [ethereum.Value.fromAddress(nft)]
    );

    return changetype<CoreCapneo__getCapneoNFTByAddressResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getCapneoNFTByAddress(
    nft: Address
  ): ethereum.CallResult<CoreCapneo__getCapneoNFTByAddressResultValue0Struct> {
    let result = super.tryCall(
      "getCapneoNFTByAddress",
      "getCapneoNFTByAddress(address):((address,uint48,address,uint48,string))",
      [ethereum.Value.fromAddress(nft)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CoreCapneo__getCapneoNFTByAddressResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getCapneoNFTByIndex(
    index: BigInt
  ): CoreCapneo__getCapneoNFTByIndexResultValue0Struct {
    let result = super.call(
      "getCapneoNFTByIndex",
      "getCapneoNFTByIndex(uint256):((address,uint48,address,uint48,string))",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return changetype<CoreCapneo__getCapneoNFTByIndexResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getCapneoNFTByIndex(
    index: BigInt
  ): ethereum.CallResult<CoreCapneo__getCapneoNFTByIndexResultValue0Struct> {
    let result = super.tryCall(
      "getCapneoNFTByIndex",
      "getCapneoNFTByIndex(uint256):((address,uint48,address,uint48,string))",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CoreCapneo__getCapneoNFTByIndexResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getIndexByNFTAddress(nft: Address): BigInt {
    let result = super.call(
      "getIndexByNFTAddress",
      "getIndexByNFTAddress(address):(uint256)",
      [ethereum.Value.fromAddress(nft)]
    );

    return result[0].toBigInt();
  }

  try_getIndexByNFTAddress(nft: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIndexByNFTAddress",
      "getIndexByNFTAddress(address):(uint256)",
      [ethereum.Value.fromAddress(nft)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMultipleCapneoNFTsByIndex(
    indices: Array<BigInt>
  ): Array<CoreCapneo__getMultipleCapneoNFTsByIndexResultRetStruct> {
    let result = super.call(
      "getMultipleCapneoNFTsByIndex",
      "getMultipleCapneoNFTsByIndex(uint256[]):((address,uint48,address,uint48,string)[])",
      [ethereum.Value.fromUnsignedBigIntArray(indices)]
    );

    return result[0].toTupleArray<
      CoreCapneo__getMultipleCapneoNFTsByIndexResultRetStruct
    >();
  }

  try_getMultipleCapneoNFTsByIndex(
    indices: Array<BigInt>
  ): ethereum.CallResult<
    Array<CoreCapneo__getMultipleCapneoNFTsByIndexResultRetStruct>
  > {
    let result = super.tryCall(
      "getMultipleCapneoNFTsByIndex",
      "getMultipleCapneoNFTsByIndex(uint256[]):((address,uint48,address,uint48,string)[])",
      [ethereum.Value.fromUnsignedBigIntArray(indices)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        CoreCapneo__getMultipleCapneoNFTsByIndexResultRetStruct
      >()
    );
  }

  getNFTAddressByIndex(index: BigInt): Address {
    let result = super.call(
      "getNFTAddressByIndex",
      "getNFTAddressByIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_getNFTAddressByIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNFTAddressByIndex",
      "getNFTAddressByIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNumberOfNfts(): BigInt {
    let result = super.call(
      "getNumberOfNfts",
      "getNumberOfNfts():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfNfts(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfNfts",
      "getNumberOfNfts():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOpenseaFactory(): Address {
    let result = super.call(
      "getOpenseaFactory",
      "getOpenseaFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOpenseaFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOpenseaFactory",
      "getOpenseaFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProtocolFeeRecipient(): Address {
    let result = super.call(
      "getProtocolFeeRecipient",
      "getProtocolFeeRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getProtocolFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProtocolFeeRecipient",
      "getProtocolFeeRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getUpgraderByNFTAddress(nft: Address): Address {
    let result = super.call(
      "getUpgraderByNFTAddress",
      "getUpgraderByNFTAddress(address):(address)",
      [ethereum.Value.fromAddress(nft)]
    );

    return result[0].toAddress();
  }

  try_getUpgraderByNFTAddress(nft: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUpgraderByNFTAddress",
      "getUpgraderByNFTAddress(address):(address)",
      [ethereum.Value.fromAddress(nft)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNFTRegistered(nft: Address): boolean {
    let result = super.call(
      "isNFTRegistered",
      "isNFTRegistered(address):(bool)",
      [ethereum.Value.fromAddress(nft)]
    );

    return result[0].toBoolean();
  }

  try_isNFTRegistered(nft: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNFTRegistered",
      "isNFTRegistered(address):(bool)",
      [ethereum.Value.fromAddress(nft)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidKYC(who: Address, signature: Bytes): boolean {
    let result = super.call("isValidKYC", "isValidKYC(address,bytes):(bool)", [
      ethereum.Value.fromAddress(who),
      ethereum.Value.fromBytes(signature)
    ]);

    return result[0].toBoolean();
  }

  try_isValidKYC(who: Address, signature: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidKYC",
      "isValidKYC(address,bytes):(bool)",
      [ethereum.Value.fromAddress(who), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployCapneoNFTCall extends ethereum.Call {
  get inputs(): DeployCapneoNFTCall__Inputs {
    return new DeployCapneoNFTCall__Inputs(this);
  }

  get outputs(): DeployCapneoNFTCall__Outputs {
    return new DeployCapneoNFTCall__Outputs(this);
  }
}

export class DeployCapneoNFTCall__Inputs {
  _call: DeployCapneoNFTCall;

  constructor(call: DeployCapneoNFTCall) {
    this._call = call;
  }

  get initData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get snapshotSpace(): string {
    return this._call.inputValues[1].value.toString();
  }

  get magicValue(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DeployCapneoNFTCall__Outputs {
  _call: DeployCapneoNFTCall;

  constructor(call: DeployCapneoNFTCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetNewBeaconCall extends ethereum.Call {
  get inputs(): SetNewBeaconCall__Inputs {
    return new SetNewBeaconCall__Inputs(this);
  }

  get outputs(): SetNewBeaconCall__Outputs {
    return new SetNewBeaconCall__Outputs(this);
  }
}

export class SetNewBeaconCall__Inputs {
  _call: SetNewBeaconCall;

  constructor(call: SetNewBeaconCall) {
    this._call = call;
  }

  get newBeacon(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get magicValue(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetNewBeaconCall__Outputs {
  _call: SetNewBeaconCall;

  constructor(call: SetNewBeaconCall) {
    this._call = call;
  }
}

export class SetOpenseaFactoryCall extends ethereum.Call {
  get inputs(): SetOpenseaFactoryCall__Inputs {
    return new SetOpenseaFactoryCall__Inputs(this);
  }

  get outputs(): SetOpenseaFactoryCall__Outputs {
    return new SetOpenseaFactoryCall__Outputs(this);
  }
}

export class SetOpenseaFactoryCall__Inputs {
  _call: SetOpenseaFactoryCall;

  constructor(call: SetOpenseaFactoryCall) {
    this._call = call;
  }

  get newFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get magicValue(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetOpenseaFactoryCall__Outputs {
  _call: SetOpenseaFactoryCall;

  constructor(call: SetOpenseaFactoryCall) {
    this._call = call;
  }
}

export class SetProtocolFeeRecipientCall extends ethereum.Call {
  get inputs(): SetProtocolFeeRecipientCall__Inputs {
    return new SetProtocolFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeRecipientCall__Outputs {
    return new SetProtocolFeeRecipientCall__Outputs(this);
  }
}

export class SetProtocolFeeRecipientCall__Inputs {
  _call: SetProtocolFeeRecipientCall;

  constructor(call: SetProtocolFeeRecipientCall) {
    this._call = call;
  }

  get protocolFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get magicValue(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetProtocolFeeRecipientCall__Outputs {
  _call: SetProtocolFeeRecipientCall;

  constructor(call: SetProtocolFeeRecipientCall) {
    this._call = call;
  }
}
